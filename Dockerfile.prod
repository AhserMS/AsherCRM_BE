# Use an official Node.js image as the base image for building the application
FROM node:20-bullseye AS builder

# Create and set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json to leverage Docker cache for dependencies
COPY package*.json ./

# Install dependencies including devDependencies for the build
RUN npm install --frozen-lockfile

# Copy the rest of the application files
COPY . .

# Generate Prisma client based on the schema
RUN npx prisma generate

# Compile TypeScript code to JavaScript
RUN npx tsc

# Use another lightweight Node.js image for the final build to save space
FROM node:20-alpine AS runner

# Set the environment variable to production mode
ENV NODE_ENV=production

# Set the working directory inside the container
WORKDIR /app

# Copy only the necessary files from the builder stage
COPY --from=builder /app/package.json /app/package-lock.json ./
COPY --from=builder /app/build ./build
COPY --from=builder /app/node_modules ./node_modules

# Install only production dependencies
RUN npm install --production && npm cache clean --force

# Copy the Prisma client generated in the builder stage
COPY --from=builder /app/node_modules/.prisma/client ./node_modules/.prisma/client

# Expose the port your application runs on
EXPOSE 9000

# Start the application using Node.js
CMD ["node", "build/index.js"]
