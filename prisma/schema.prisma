// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model landlords {
  id       String       @id @default(cuid())
  property properties[]
  userId   String
  user     users        @relation(fields: [userId], references: [id])
  tenants  tenants[]
}

model properties {
  id           String @id @default(cuid())
  name         String
  description  String
  propertysize Int?

  // owners
  landlordId String
  landlord   landlords @relation(fields: [landlordId], references: [id])
  agencyId   String?
  agency     agency?   @relation(fields: [agencyId], references: [id])
  agents     agents[]

  // time attributes
  yearBuilt DateTime?
  createdAt DateTime? @default(now())

  // address
  city     String?
  state    String?
  country  String?
  zipcode  String?
  location String?

  // visualizations
  images   String[]
  videourl String[]

  //transaction can be expenses incurred or income generated
  transactions transactions[]

  amenities       String[]
  // apartments
  totalApartments Int?
  apartments      apartments[]
  ratings         Rating[]
  tenants         tenants[]
  inventory       inventory[]
}

model apartments {
  id           String   @id @default(cuid())
  code         String
  description  String
  sittingRoom  Int?
  waitingRoom  Int?
  bedrooms     Int?
  kitchen      Int?
  bathrooms    Int?
  garages      Int?
  floorplans   String[]
  facilities   String[]
  offices      Int?
  isVacant     Boolean  @default(true)
  // rental duration in years
  rentalAmount Decimal

  // visualizations
  images   String[]
  videourl String[]

  // the property to which the apartment belongs
  propertyId String
  property   properties @relation(fields: [propertyId], references: [id])

  histories appartmentTransactionHistory[]

  transactions transactions[]

  inventory            inventory[]
  tenantPaymentHistory tenantPaymentHistory[]
  tenantsId            String?
  currentTenant        tenants?               @relation(fields: [tenantsId], references: [id])
}

model appartmentTransactionHistory {
  id String @id @default(cuid())

  rentDuration Int
  amountPaid   Decimal

  apartmentsId String?
  apartments   apartments? @relation(fields: [apartmentsId], references: [id])

  tenantId String
  tenant   tenants @relation(fields: [tenantId], references: [id])

  transactionId String?
  transactions  transactions? @relation(fields: [transactionId], references: [id])
}

//inventory accounts for the lists of items
// for appartments within the inventory
model inventory {
  id           String    @id @default(cuid())
  location     String
  apartmentId  String
  propertiesId String?
  quantity     Int
  description  String?
  createdAt    DateTime? @default(now())

  propertyApartments apartments  @relation(fields: [apartmentId], references: [id])
  properties         properties? @relation(fields: [propertiesId], references: [id])
}

enum TransactionType {
  EXPENSE
  REVENUE
}

model transactions {
  id                           String                         @id @default(cuid())
  description                  String
  cost                         Decimal                        @db.Decimal(18, 2)
  createdAt                    DateTime                       @default(now()) @db.Timestamptz(6)
  // type can be income
  type                         TransactionType
  propertyId                   String
  properties                   properties                     @relation(fields: [propertyId], references: [id])
  appartmentId                 String
  apartments                   apartments                     @relation(fields: [appartmentId], references: [id])
  tenantId                     String
  tenant                       tenants                        @relation(fields: [tenantId], references: [id])
  appartmentTransactionHistory appartmentTransactionHistory[]
}

model agency {
  id         String       @id @default(cuid())
  name       String
  agents     agents[]
  properties properties[]
  // TODO:
}

model agents {
  id         String      @id @default(cuid())
  agentId    String?
  about      String?
  facebook   String?
  twitter    String?
  instagram  String?
  linkedin   String?
  // date fields
  createdAt  DateTime?   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime?   @default(now()) @db.Timestamptz(6)
  // agents relationships
  userId     String
  user       users       @relation(fields: [userId], references: [id])
  agencyId   String?
  agency     agency?     @relation(fields: [agencyId], references: [id])
  propertyId String?
  properties properties? @relation(fields: [propertyId], references: [id])
  tenant     tenants[]
}

model Rating {
  id          String  @id @default(cuid())
  ratingValue Int     @default(0) // a rating scale from 0 to 5
  comments    String? // Optional field for user comments

  propertyId String?
  property   properties? @relation(fields: [propertyId], references: [id])

  userId String?
  user   users?  @relation("userRated", fields: [userId], references: [id])

  ratedByUserId String
  ratedBy       users  @relation("ratedByUser", fields: [ratedByUserId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

// tenant session
model tenantPaymentHistory {
  id            String    @id @default(cuid())
  rentStartDate DateTime? @db.Timestamptz(6)
  rentEndDate   DateTime? @db.Timestamptz(6)

  expectedRentAmount Decimal? @db.Decimal(18, 2)
  amountPaid         Decimal? @db.Decimal(18, 2)

  // relationships feilds
  tenantId String?
  tenant   tenants? @relation(fields: [tenantId], references: [id])

  apartmentsId String?
  apartments   apartments? @relation(fields: [apartmentsId], references: [id])
}

model tenants {
  id         String @id @default(cuid())
  tenantId   String @unique
  landlordId String

  rentstatus Int

  // durationofrent        Int?
  isexisted             Int?
  dateOfFirstRent       DateTime? @default(now()) @db.Timestamptz(6)
  apartmentOrFlatNumber Int?

  // relationships definitions
  userId                       String
  user                         users                          @relation(fields: [userId], references: [id])
  landlord                     landlords                      @relation(fields: [landlordId], references: [id])
  agentId                      String?
  agent                        agents?                        @relation(fields: [agentId], references: [id])
  propertyId                   String?
  property                     properties?                    @relation(fields: [propertyId], references: [id])
  history                      tenantPaymentHistory[]
  transactions                 transactions[]
  appartmentTransactionHistory appartmentTransactionHistory[]
  apartments                   apartments[]
}

// user information definition 
// defining the user roles
enum userRoles {
  VENDOR
  LANDLORD
  TENANT
  WEBUSER
  AGENT
  ADMIN
}

model balances {
  id                 String  @id @default(cuid())
  amount             Decimal @default(0.00) @db.Decimal(18, 2)
  outstandingBalance Decimal @default(0.00) @db.Decimal(18, 2)
  userId             String  @unique
  user               users   @relation(fields: [userId], references: [id])
}

model users {
  id         String  @id @default(cuid())
  email      String  @unique
  password   String?
  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user role definition default is webuser
  role userRoles[] @default([WEBUSER])

  // foreign key and relational fields 
  balance            balances?
  VerificationToken  VerificationToken[]
  tenant             tenants[]
  landlords          landlords[]
  community          Community[]
  communityPost      CommunityPost[]
  communityPostLikes CommunityPostLikes[]
  communityPostViews CommunityPostViews[]
  sentEmails         Email[]              @relation("SentEmails")
  RecievedEmails     Email[]              @relation("RecievedEmails")
  applicants         applicant[]
  agents             agents[]
  Comments           Comments[]
  ratingsGiven       Rating[]             @relation("ratedByUser")
  ratingsReceived    Rating[]             @relation("userRated")
  messagesSent       Message[]            @relation("messagesSent")
  messagesReceived   Message[]            @relation("messagesReceived")
  chatRoomsUser1     ChatRoom[]           @relation("chatRoomsUser1")
  chatRoomsUser2     ChatRoom[]           @relation("chatRoomsUser2")
  profileId          String?
  profile            profile?             @relation(fields: [profileId], references: [id])
}

model profile {
  id          String    @id @default(cuid())
  gender      String?
  phoneNumber String?
  address     String?
  dateOfBirth DateTime?
  fullname    String?
  profileUrl  String?
  users       users[]
}

model VerificationToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    String
  user      users     @relation(fields: [userId], references: [id])
  expiresAt DateTime?
  createdAt DateTime  @default(now())
}

model Community {
  id                    String   @id @default(cuid())
  communityName         String   @unique
  communityOwnerId      String
  user                  users    @relation(fields: [communityOwnerId], references: [id])
  description           String
  visibility            Boolean // we can have an enum it should either be public or private
  communityProfileImage String?
  communityProfileUrl   String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model CommunityPost {
  id                   String               @id @default(cuid())
  communityId          String
  userId               String
  title                String
  category             String
  tags                 String[]
  content              String
  imageUrl             String
  likes                CommunityPostLikes[]
  views                CommunityPostViews[]
  user                 users                @relation(fields: [userId], references: [id])
  communityPostViewsId String               @unique
  Comments             Comments[]
}

model CommunityPostLikes {
  id        String        @id @default(cuid())
  postId    String
  userId    String
  post      CommunityPost @relation(fields: [postId], references: [id])
  user      users         @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
}

model CommunityPostViews {
  id     String        @id @default(cuid())
  postId String
  userId String
  post   CommunityPost @relation(fields: [postId], references: [id])
  user   users         @relation(fields: [userId], references: [id])
}

model Comments {
  id              String        @id @default(cuid())
  postId          String
  userId          String
  post            CommunityPost @relation(fields: [postId], references: [id])
  user            users         @relation(fields: [userId], references: [id])
  comment         String
  parentCommentId String?
  parentComment   Comments?     @relation("ParentChildComment", fields: [parentCommentId], references: [id])
  childComments   Comments[]    @relation("ParentChildComment")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([parentCommentId])
}

model Email {
  id               String   @id @default(cuid())
  senderEmail      String
  recieverEmail    String
  subject          String
  body             String
  attachment       String[]
  isReadBySender   Boolean  @default(true)
  isReadByReciever Boolean  @default(false)
  isDraft          Boolean  @default(true)
  isSent           Boolean  @default(false)
  createdAt        DateTime @default(now())
  sender           users    @relation("SentEmails", fields: [senderEmail], references: [email])
  reciver          users    @relation("RecievedEmails", fields: [recieverEmail], references: [email])
}

// chats schema
// Define the messages model
model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  chatRoomId String

  sender   users    @relation("messagesSent", fields: [senderId], references: [id])
  receiver users    @relation("messagesReceived", fields: [receiverId], references: [id])
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id])
}

// Define the chatRooms model for one-on-one chats
model ChatRoom {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user1    users     @relation("chatRoomsUser1", fields: [user1Id], references: [id])
  user2    users     @relation("chatRoomsUser2", fields: [user2Id], references: [id])
  messages Message[]

  @@unique([user1Id, user2Id])
}

// Define the applicant model
model applicant {
  id              String   @id @default(cuid())
  title           String
  firstName       String
  middleName      String
  lastName        String
  dob             DateTime
  email           String
  phoneNumber     String
  maritalStatus   String
  leaseStartDate  DateTime
  leaseEndDate    DateTime
  moveInDate      DateTime
  rentAmount      Decimal
  securityDeposit Decimal
  leaseTerm       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            users    @relation(fields: [userId], references: [id])

  residentialInformation residentialInformation[]
  guarantorInformation   guarantorInformation[]
  emergencyContact       emergencyContact[]
  documents              document[]
  employmentInformations EmploymentInformation[]
  nextOfKin              nextOfKin[]
}

model nextOfKin {
  id           String   @id @default(cuid())
  lastName     String
  relationship String
  email        String
  firstName    String
  phoneNumber  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  middleName   String?

  applicantId String
  applicant   applicant @relation(fields: [applicantId], references: [id])
}

// Define the residentialInformation model
model residentialInformation {
  id                  String @id @default(cuid())
  state               String
  zipcode             String
  address             String
  landlordPhoneNumber String

  addressStatus     String
  lengthOfResidence String
  currentLandlord   String
  city              String
  landlordEmail     String

  applicantId String
  applicant   applicant @relation(fields: [applicantId], references: [id])
}

// Define the guarantorInformation model
model guarantorInformation {
  id          String    @id @default(cuid())
  fullName    String
  phoneNumber String
  email       String
  address     String
  applicantId String
  applicant   applicant @relation(fields: [applicantId], references: [id])
}

// Define the emergencyContact model
model emergencyContact {
  id          String    @id @default(cuid())
  fullname    String
  phoneNumber String
  email       String
  address     String
  applicantId String
  applicant   applicant @relation(fields: [applicantId], references: [id])
}

// Define the document model
model document {
  id           String   @id @default(cuid())
  documentName String
  documentUrl  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  applicantId String
  applicant   applicant @relation(fields: [applicantId], references: [id])
}

// Define the EmploymentInformation model
model EmploymentInformation {
  id                String  @id @default(cuid())
  employerCompany   String
  taxCredit         String?
  childBenefit      String?
  childMaintenance  String?
  disabilityBenefit String?
  housingBenefit    String?
  others            String?
  pension           String?
  employerEmail     String

  employerPhone    String
  employmentStatus String
  positionTitle    String

  applicantId String
  applicant   applicant @relation(fields: [applicantId], references: [id])
}

// user wallets
model wallet {
  id                   String    @id @default(cuid())
  customerid           Int //USER??
  transactiontype      String    @db.VarChar(15)
  transactionDesc      String?
  transactionId        String    @db.VarChar(255)
  amount               Decimal?  @default(0.00) @db.Decimal(18, 2)
  dateadded            DateTime? @default(now()) @db.Timestamptz(6)
  balance              Decimal?  @default(0.00) @db.Decimal(18, 2)
  transactionIndicator Int?
  payerName            String?   @db.VarChar(255)
  payerId              String? //USER??
}
