// enum TransactionType {
//   EXPENSE
//   REVENUE
// }
enum TransactionType {
  FUNDWALLET
  WITHDRAWAL
  MAKEPAYMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  RENT_RENEWED
}

enum PaymentGateway {
  STRIPE
  FLUTTERWAVE
  PAYSTACK
}

model Transactions {
  id                    String             @id @default(cuid())
  description           String
  amount                Decimal            @db.Decimal(18, 2)
  userId                String
  user                  users              @relation(fields: [userId], references: [id])
  transactionType       TransactionType?
  transactionStatus     TransactionStatus?
  walletId              String
  wallet                wallet             @relation(fields: [walletId], references: [id])
  referenceId           String             @unique
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  stripePaymentIntentId String?            @unique
  Ads                   Ads[]
  paymentGateway        PaymentGateway?
}

enum PropertyTransactionsType {
  RENT_DUE
  RENT_PAYMENT
  MAINTAINACE_FEE
  LANDLORD_PAYOUT
  BILL_PAYMENT
  LATE_FEE
  CHARGES
  SUPPLIES
  EQUIPMENTS
}

enum PaymentFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model PropertyTransactions {
  id                           String                         @id @default(cuid())
  description                  String
  amount                       Decimal                        @db.Decimal(18, 2)
  propertyId                   String
  properties                   properties                     @relation(fields: [propertyId], references: [id])
  appartmentId                 String?
  apartments                   apartments?                    @relation(fields: [appartmentId], references: [id])
  tenantId                     String
  tenant                       tenants                        @relation(fields: [tenantId], references: [tenantId])
  appartmentTransactionHistory appartmentTransactionHistory[]
  transactionStatus            TransactionStatus
  type                         PropertyTransactionsType
  referenceId                  String                         @unique
  paidDate                     DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  paymentFrequency             PaymentFrequency?
  nextDueDate                  DateTime?
  lastPaidDate                 DateTime?
  missedPayment                Int                            @default(0)
  billsId                      String?
  bills                        bills?                         @relation(fields: [billsId], references: [id])
  landlords                    landlords?                     @relation(fields: [landlordsId], references: [id])
  landlordsId                  String?
  attachment                   String[]
}

model tenantPaymentHistory {
  id            String    @id @default(cuid())
  rentStartDate DateTime? @db.Timestamptz(6)
  rentEndDate   DateTime? @db.Timestamptz(6)

  expectedRentAmount Decimal? @db.Decimal(18, 2)
  amountPaid         Decimal? @db.Decimal(18, 2)

  // relationships feilds
  tenantId String?
  tenant   tenants? @relation(fields: [tenantId], references: [id])

  apartmentsId String?
  apartments   apartments? @relation(fields: [apartmentsId], references: [id])
}

model appartmentTransactionHistory {
  id String @id @default(cuid())

  rentDuration Int
  amountPaid   Decimal

  apartmentsId String?
  apartments   apartments? @relation(fields: [apartmentsId], references: [id])

  tenantId String
  tenant   tenants @relation(fields: [tenantId], references: [id])

  transactionId String?
  transactions  PropertyTransactions? @relation(fields: [transactionId], references: [id])
}

model bills {
  id            String                 @id @default(cuid())
  billId        String                 @unique
  billName      String
  billCategory  String
  description   String
  amount        Decimal                @db.Decimal(18, 2)
  billFrequency PaymentFrequency
  dueDate       DateTime
  propertyId    String
  property      properties             @relation(fields: [propertyId], references: [id])
  landlordId    String                 @unique
  landlord      landlords              @relation(fields: [landlordId], references: [id])
  transactions  PropertyTransactions[]
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
}

// New Subscription model
model Subscription {
  id                   String    @id @default(cuid())
  stripeSubscriptionId String    @unique
  status               String
  userId               String
  user                 users     @relation(fields: [userId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  cancelledAt          DateTime?
}
