enum CommunityVisibility {
  PUBLIC
  PRIVATE
}

model Community {
  id                      String                    @id @default(cuid())
  communityName           String                    @unique
  communityOwnerId        String
  user                    users                     @relation(fields: [communityOwnerId], references: [id])
  description             String
  visibility              CommunityVisibility       @default(PUBLIC) // we can have an enum it should either be public or private
  communityProfileImage   String?
  communityProfileUrl     String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  CommunityMember         CommunityMember[]
  CommunityInvitationLink CommunityInvitationLink[]
}

enum MembershipStatus {
  INVITED
  MEMBER
  REJECTED
}

model CommunityMember {
  id          String           @id @default(cuid())
  communityId String
  userId      String
  status      MembershipStatus
  community   Community        @relation(fields: [communityId], references: [id])
  user        users            @relation(fields: [userId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt()

  @@unique([communityId, userId])
}

model CommunityInvitationLink {
  id          String    @id @default(cuid())
  communityId String
  inviteCode  String    @unique
  expiresAt   DateTime
  community   Community @relation(fields: [communityId], references: [id])
  createdAt   DateTime  @default(now())

  @@index([inviteCode])
}

model CommunityPost {
  id          String               @id @default(cuid())
  communityId String
  userId      String
  title       String
  category    String
  tags        String[]
  content     String
  imageUrl    String?
  likesCount  Int                  @default(0)
  viewsCount  Int                  @default(0)
  likes       CommunityPostLikes[]
  views       CommunityPostViews[]
  user        users                @relation(fields: [userId], references: [id])
  Comments    Comments[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model CommunityPostLikes {
  id        String        @id @default(cuid())
  postId    String
  userId    String
  post      CommunityPost @relation(fields: [postId], references: [id])
  user      users         @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
}

model CommunityPostViews {
  id     String        @id @default(cuid())
  postId String
  userId String
  post   CommunityPost @relation(fields: [postId], references: [id])
  user   users         @relation(fields: [userId], references: [id])
}

model Comments {
  id              String        @id @default(cuid())
  postId          String
  userId          String
  post            CommunityPost @relation(fields: [postId], references: [id])
  user            users         @relation(fields: [userId], references: [id])
  comment         String
  parentCommentId String?
  parentComment   Comments?     @relation("ParentChildComment", fields: [parentCommentId], references: [id])
  childComments   Comments[]    @relation("ParentChildComment")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([parentCommentId])
}