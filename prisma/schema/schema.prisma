// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ads {
  id               String        @id @default(cuid())
  title            String
  description      String
  amountPaid       Decimal       @db.Decimal(18, 2)
  locations        String[]
  bussinessDetails Json
  contactInfo      String
  startedDate      DateTime
  endDate          DateTime
  attachment       String[]
  isListed         Boolean       @default(false)
  views            Int           @default(0)
  clicks           Int           @default(0)
  reach            Int           @default(0)
  userId           String
  user             users         @relation(fields: [userId], references: [id])
  referenceId      String?
  transaction      Transactions? @relation(fields: [referenceId], references: [id])
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model landlords {
  id                    String                  @id @default(cuid())
  property              properties[]
  userId                String                  @unique
  user                  users                   @relation(fields: [userId], references: [id])
  tenants               tenants[]
  lnadlordSupportTicket lnadlordSupportTicket[]
  transactions          PropertyTransactions[]
  bills                 bills[]
  reviews               reviews[]

  isDeleted            Boolean                @default(false)
  bankInfo             bankInfo[]
  maintenances         maintenance[]          @relation("landlordUser")
  maintenanceWhitelist maintenanceWhitelist[]
}

model bankInfo {
  id            String     @id @default(cuid())
  landlordId    String?
  landlords     landlords? @relation(fields: [landlordId], references: [id])
  vendorId      String?
  vendors       vendors?   @relation(fields: [vendorId], references: [id])
  bankName      String
  accountNumber String
  accountName   String
}

model properties {
  id           String  @id @default(cuid())
  name         String
  description  String
  propertysize Int?
  isDeleted    Boolean @default(false)

  // owners
  landlordId String
  landlord   landlords @relation(fields: [landlordId], references: [id])
  agencyId   String?
  agency     agency?   @relation(fields: [agencyId], references: [id])
  agents     agents[]

  //marketValue
  marketValue Decimal? @default(0.00) @db.Decimal(18, 2)

  // time attributes
  yearBuilt DateTime?
  createdAt DateTime? @default(now())

  // address
  city     String
  state    String
  country  String
  zipcode  String
  location String?

  // visualizations
  images   String[]
  videourl String[]

  //transaction can be expenses incurred or income generated
  transactions PropertyTransactions[]

  amenities            String[]
  // apartments
  totalApartments      Int?
  apartments           apartments[]
  ratings              Rating[]
  tenants              tenants[]
  applicant            application[]
  maintenance          maintenance[]
  reviews              reviews[]
  propertyDocument     propertyDocument[]
  bills                bills[]
  taskManagement       taskManagement[]
  inventoryManageMent  inventoryManageMent[]
  maintenanceWhitelist maintenanceWhitelist[]
}

model propertyDocument {
  id          String   @id @default(cuid())
  name        String
  documentUrl String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  apartmentsId String?
  apartments   apartments? @relation(fields: [apartmentsId], references: [id])
  propertyId   String?
  properties   properties? @relation(fields: [propertyId], references: [id])
  uploadedBy   String?
  users        users?      @relation(fields: [uploadedBy], references: [id])
}

model apartments {
  id                   String                         @id @default(cuid())
  code                 String
  name                 String
  size                 String // 2500sqf
  monthlyRent          String
  minLeaseDuration     String
  maxLeaseDuration     String
  description          String
  sittingRoom          Int?
  waitingRoom          Int?
  bedrooms             Int?
  kitchen              Int?
  bathrooms            Int?
  garages              Int?
  floorplans           String[]
  facilities           String[]
  offices              Int?
  isVacant             Boolean                        @default(true)
  isDeleted            Boolean                        @default(false)
  rentalAmount         Decimal
  images               String[]
  videourl             String[]
  propertyId           String
  property             properties                     @relation(fields: [propertyId], references: [id])
  histories            appartmentTransactionHistory[]
  transactions         PropertyTransactions[]
  tenantPaymentHistory tenantPaymentHistory[]
  tenantsId            String?
  currentTenant        tenants?                       @relation(fields: [tenantsId], references: [id])
  maintenance          maintenance[]
  reviews              reviews[]
  propertyDocument     propertyDocument[]
  inventoryManageMent  inventoryManageMent[]
  maintenanceWhitelist maintenanceWhitelist[]
}

model agency {
  id         String       @id @default(cuid())
  name       String
  agents     agents[]
  properties properties[]
  // TODO:
}

model agents {
  id         String      @id @default(cuid())
  agentId    String?
  about      String?
  facebook   String?
  twitter    String?
  instagram  String?
  linkedin   String?
  // date fields
  createdAt  DateTime?   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime?   @default(now()) @db.Timestamptz(6)
  // agents relationships
  userId     String
  user       users       @relation(fields: [userId], references: [id])
  agencyId   String?
  agency     agency?     @relation(fields: [agencyId], references: [id])
  propertyId String?
  properties properties? @relation(fields: [propertyId], references: [id])
  tenant     tenants[]
}

model Rating {
  id          String  @id @default(cuid())
  ratingValue Int     @default(0) // a rating scale from 0 to 5
  comments    String? // Optional field for user comments

  propertyId String?
  property   properties? @relation(fields: [propertyId], references: [id])

  userId String?
  user   users?  @relation("userRated", fields: [userId], references: [id])

  ratedByUserId String
  ratedBy       users  @relation("ratedByUser", fields: [ratedByUserId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

model vendors {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  services     services[]
  reviews      reviews[]
  bankInfo     bankInfo[]
  maintenances maintenance[] @relation("vendorUser")
}

model tenants {
  id         String @id @default(cuid())
  tenantId   String @unique
  landlordId String

  rentstatus            Int
  leaseStartDate        DateTime
  leaseEndDate          DateTime
  isCurrentLease        Boolean   @default(true)
  isexisted             Int?
  dateOfFirstRent       DateTime? @default(now()) @db.Timestamptz(6)
  apartmentOrFlatNumber Int?

  // relationships definitions
  userId                       String
  user                         users                          @relation(fields: [userId], references: [id])
  landlord                     landlords                      @relation(fields: [landlordId], references: [id])
  agentId                      String?
  agent                        agents?                        @relation(fields: [agentId], references: [id])
  propertyId                   String
  property                     properties                     @relation(fields: [propertyId], references: [id])
  history                      tenantPaymentHistory[]
  appartmentTransactionHistory appartmentTransactionHistory[]
  apartments                   apartments[]
  tenantSupportTicket          tenantSupportTicket[]
  PropertyTransactions         PropertyTransactions[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  reviews   reviews[]
  services  services[]

  maintenances maintenance[] @relation("tenantUser")

  @@unique([userId, propertyId])
}

// user information definition 
// defining the user roles
enum userRoles {
  VENDOR
  LANDLORD
  TENANT
  WEBUSER
  AGENT
  ADMIN
}

model users {
  id         String  @id @default(cuid())
  email      String  @unique
  password   String?
  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user role definition default is webuser
  role userRoles[] @default([WEBUSER])

  // foreign key and relational fields 
  VerificationToken      VerificationToken[]
  tenant                 tenants[]
  landlords              landlords?
  community              Community[]
  communityPost          CommunityPost[]
  communityPostLikes     CommunityPostLikes[]
  communityPostViews     CommunityPostViews[]
  sentEmails             Email[]                  @relation("SentEmails")
  RecievedEmails         Email[]                  @relation("RecievedEmails")
  applicantion           application[]
  agents                 agents[]
  Comments               Comments[]
  ratingsGiven           Rating[]                 @relation("ratedByUser")
  ratingsReceived        Rating[]                 @relation("userRated")
  messagesSent           Message[]                @relation("messagesSent")
  messagesReceived       Message[]                @relation("messagesReceived")
  chatRoomsUser1         ChatRoom[]               @relation("chatRoomsUser1")
  chatRoomsUser2         ChatRoom[]               @relation("chatRoomsUser2")
  profileId              String?                  @unique
  profile                profile?                 @relation(fields: [profileId], references: [id])
  residentialInformation residentialInformation[]
  CommunityMember        CommunityMember[]
  // maintenance            maintenance[]
  Ads                    Ads[]
  wallet                 wallet[]
  Transactions           Transactions[]

  // maintenance maintenance[] @relation(name: "vendorUser")
  // tenantMaintenanceUser maintenance[]      @relation("tenantUser")
  // vendorMaintenaceUser  maintenance[]      @relation("vendorUser")
  creditScore      creditScore?
  propertyDocument propertyDocument[]
  reviews          reviews[]
  Subscription     Subscription[]
}

model creditScore {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        users    @relation(fields: [userId], references: [id])
  score       Int
  lastUpdated DateTime @default(now())

  //NOTE: Factors that can possibly contribute to the score
  paymentHistory    Float
  rentalHistory     Float
  maintainanceScore Float
  reviewScore       Float
}

model VerificationToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    String
  user      users     @relation(fields: [userId], references: [id])
  expiresAt DateTime?
  createdAt DateTime  @default(now())
}

model Email {
  id               String   @id @default(cuid())
  senderEmail      String
  recieverEmail    String
  subject          String
  body             String
  attachment       String[]
  isReadBySender   Boolean  @default(true)
  isReadByReciever Boolean  @default(false)
  isDraft          Boolean  @default(true)
  isSent           Boolean  @default(false)
  createdAt        DateTime @default(now())
  sender           users    @relation("SentEmails", fields: [senderEmail], references: [email])
  reciver          users    @relation("RecievedEmails", fields: [recieverEmail], references: [email])
}

// user wallets
model wallet {
  id           String         @id @default(cuid())
  userId       String         @unique
  user         users          @relation(fields: [userId], references: [id])
  balance      Decimal        @default(0.00) @db.Decimal(18, 2)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Transactions Transactions[]
}

//  status will be in-progress, completed, assigned, aborted
model status {
  id        String  @id @default(cuid())
  name      String
  isDeleted Boolean @default(false)
  // maintenances maintenance[]
}
